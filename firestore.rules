rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isApproved() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.status == 'approved';
    }
    
    // System collection for admin status
    match /system/admin_status {
      allow get: if true;
      allow write: if isAdmin();
    }

    // Users collection - user profiles with admin approval system
    match /users/{userId} {
      // Users can read their own profile, admins can read all profiles
      // Allow admins to list all users for pending approvals
      allow read, list: if isOwner(userId) || isAdmin();
      
      // Users can create their own profile during signup
      allow create: if isOwner(userId) && 
        request.resource.data.keys().hasAll(['email', 'displayName', 'companyName', 'role', 'status', 'createdAt']) &&
        request.resource.data.role in ['user', 'admin'] &&
        request.resource.data.uid == userId &&
        request.resource.data.email == request.auth.token.email &&
        // Only allow admin creation if no admin exists or if creating user is admin
        (request.resource.data.role == 'user' || 
         (request.resource.data.role == 'admin' && (!exists(/databases/$(database)/documents/system/admin_status) || isAdmin())));
      
      // Users can update their own profile (limited fields)
      allow update: if isOwner(userId) && 
        !('role' in request.resource.data.diff(resource.data).affectedKeys()) &&
        !('status' in request.resource.data.diff(resource.data).affectedKeys()) &&
        !('uid' in request.resource.data.diff(resource.data).affectedKeys()) &&
        !('email' in request.resource.data.diff(resource.data).affectedKeys());
      
      // Admins can update user status and approval fields
      allow update: if isAdmin() && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'approvedAt', 'approvedBy']) &&
        request.resource.data.status in ['pending', 'approved', 'rejected'];
      
      // No deletion of user profiles
      allow delete: if false;
    }
    
    // Invoices collection - user-specific invoices
    match /invoices/{invoiceId} {
      // Users can only access their own invoices
      allow read, write: if isApproved() && isOwner(resource.data.userId);
      
      // Users can create invoices
      allow create: if isApproved() && isOwner(request.resource.data.userId) &&
        request.resource.data.keys().hasAll([
          'userId', 'invoiceNumber', 'date', 'dueDate', 'from', 'to', 
          'items', 'notes', 'paymentType', 'taxRate', 'discountType', 
          'discountValue', 'subTotal', 'taxAmount', 'discountAmount', 
          'total', 'includeBankingDetails', 'createdAt', 'updatedAt', 'status'
        ]) &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.status in ['draft', 'sent', 'paid', 'overdue', 'cancelled'] &&
        request.resource.data.total >= 0 &&
        request.resource.data.items is list &&
        request.resource.data.items.size() > 0;
      
      // Users can update their own invoices (prevent userId change)
      allow update: if isApproved() && isOwner(resource.data.userId) &&
        request.resource.data.userId == resource.data.userId;
      
      // Users can delete their own invoices
      allow delete: if isApproved() && isOwner(resource.data.userId);
    }
    
    // Customers collection - user-specific customers
    match /customers/{customerId} {
      // Users can only access their own customers
      allow read, write: if isApproved() && isOwner(resource.data.userId);
      
      // Users can create customers
      allow create: if isApproved() && isOwner(request.resource.data.userId) &&
        request.resource.data.keys().hasAll([
          'userId', 'name', 'email', 'address', 'createdAt'
        ]);
      
      // Users can update their own customers (prevent userId change)
      allow update: if isApproved() && isOwner(resource.data.userId) &&
        request.resource.data.userId == resource.data.userId;
      
      // Users can delete their own customers
      allow delete: if isApproved() && isOwner(resource.data.userId);
    }
    
    // Products collection - user-specific products
    match /products/{productId} {
      // Users can only access their own products
      allow read, write: if isApproved() && isOwner(resource.data.userId);
      
      // Users can create products
      allow create: if isApproved() && isOwner(request.resource.data.userId) &&
        request.resource.data.keys().hasAll([
          'userId', 'name', 'description', 'unitPrice', 'category', 'taxRate', 'createdAt'
        ]);
      
      // Users can update their own products (prevent userId change)
      allow update: if isApproved() && isOwner(resource.data.userId) &&
        request.resource.data.userId == resource.data.userId;
      
      // Users can delete their own products
      allow delete: if isApproved() && isOwner(resource.data.userId);
    }
    
    // Product Templates collection - user-specific templates
    match /productTemplates/{templateId} {
      // Users can only access their own templates
      allow read, write: if isApproved() && isOwner(resource.data.userId);
      
      // Users can create templates
      allow create: if isApproved() && isOwner(request.resource.data.userId) &&
        request.resource.data.keys().hasAll([
          'userId', 'name', 'description', 'items', 'category', 'totalPrice', 'createdAt'
        ]);
      
      // Users can update their own templates (prevent userId change)
      allow update: if isApproved() && isOwner(resource.data.userId) &&
        request.resource.data.userId == resource.data.userId;
      
      // Users can delete their own templates
      allow delete: if isApproved() && isOwner(resource.data.userId);
    }
    
    // Settings collection - user-specific settings
    match /settings/{userId} {
      // Users can only access their own settings
      allow read, write: if isApproved() && isOwner(userId);
      
      // Users can create their own settings
      allow create: if isApproved() && isOwner(userId) &&
        request.resource.data.keys().hasAll([
          'companyDetails', 'defaultTaxRate', 'defaultPaymentTerms',
          'invoicePrefix', 'nextInvoiceNumber', 'currency', 'defaultTemplate',
          'theme', 'notifications', 'createdAt', 'updatedAt'
        ]);
    }
    
    // System collections (read-only for authenticated users, write for admins)
    match /system/{document=**} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Logs collection (admin read-only)
    match /logs/{logId} {
      allow read: if isAdmin();
      allow write: if false; // Only backend services can write logs
    }
    
    // Deny access to any other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}